#######################################################################
#
# This is the main Nginx configuration file.
#
# More information about the configuration options is available on
#   * the English wiki - http://wiki.nginx.org/Main
#   * the Russian documentation - http://sysoev.ru/nginx/
#
#######################################################################

#----------------------------------------------------------------------
# Main Module - directives that cover basic functionality
#
#   http://wiki.nginx.org/NginxHttpMainModule
#
#----------------------------------------------------------------------

user              {{ ansible_ssh_user }};
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  ##
  # Harden SSL Settings for PCI Compliance
  ##
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  ssl_prefer_server_ciphers on;
  #ssl_dhparam ssl/dh4096.pem;
  ssl_session_cache shared:SSL:10m;

  ##
  # Basic Settings
  ##

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 3600;
  types_hash_max_size 2048;
  server_tokens off;
  underscores_in_headers on;
  port_in_redirect off;
  server_name_in_redirect off;
  server_names_hash_max_size 8192;

  ##
  # Real ip settings
  ##
  # real_ip_header X-Forwarded-For;
  # real_ip_recursive on;
  # set_real_ip_from 10.0.0.0/8;
  # set_real_ip_from 172.31.0.0/16;
  # include /etc/nginx/real-ip.cloudfront.conf;
  # include /etc/nginx/real-ip.cloudflare.conf;

  ##
  # Send X-Node-Id to the client
  ##
  add_header X-Node-ID unknown;

  ##
  # Set $httpdocs variable based on $https variable
  # or $http_x_forwarded_proto header.
  # regex below sets if $httpsflag variable to "on"
  # either $http_x_forwarded_proto=https or $https=on
  ##
  map "$http_x_forwarded_proto$https" $httpsflag {
    default        "off";
    ~*(^https|on$) "on";
  }

  map $httpsflag $httpdocs {
    default "httpdocs";
    on      "httpsdocs";
  }

  map $httpsflag $rscheme {
    default "http";
    on      "https";
  }

  ##
  # Set variable if request is coming from cloudfront
  ##
  map $http_x_amz_cf_id $from_cdn {
    default "on";
    ""      "off";
  }

  map $request_body $referenceNo {
    default "-";
    ~referenceNo=(?<REFNO>[^$&]+) $REFNO;
    ~\\x22referenceNo\\x22:\s*\\x22(?<REFNO>.*?)\\x22 $REFNO;
  }

  ##
  # define log formats
  ##
  log_format json '{ "@timestamp": "$time_iso8601", '
                    '"remote_addr": "$remote_addr", '
                    '"remote_user": "$remote_user", '
                    '"body_bytes_sent": "$body_bytes_sent", '
                    '"request_time": "$request_time", '
                    '"status": "$status", '
                    '"request": "$request", '
                    '"request_method": "$request_method", '
                    '"http_referrer": "$http_referer", '
                    '"x_forwarded_for": "$http_x_forwarded_for", '
                    '"x_amz_cf_id": "$http_x_amz_cf_id", '
                    '"http_from": "$http_from", '
                    '"upstream_response_time": "$upstream_response_time", '
                    '"http_user_agent": "$http_user_agent" }';

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" "refNo:$referenceNo"';

  log_format  mainrefno  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$referenceNo"';

  log_format  maindebug '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$request_body"';


  ##
  # Check if request is from a bot
  ##
  map $http_user_agent $is_bot {
    default                   false;
    ~Googlebot                true;
    ~Mediapartners-Google     true;
    ~AdsBot-Google            true;
    ~Yandex                   true;
    ~Yahoo                    true;
    ~bingbot                  true;
    ~msnbot                   true;
    ~Baiduspider              true;
  }

  ##
  # Check if request is a health check request
  ##
  map "$http_user_agent:isbot=$is_bot:ip=$remote_addr" $access_log_suffix {
    default                 "access.log";
    ~Pingdom                "pingdom.log";
    ~*elb-healthcheck       "health.log";
    ~:isbot=true            "bot.log";
    ~:ip=127\.0\.0\.        "internal.log";
  }

  access_log /var/log/nginx/$access_log_suffix combined;
  error_log /var/log/nginx/error.log error;


  ##
  # Gzip Settings
  ##

  gzip on;
  gzip_disable "msie6";

  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;


  ##
  # enable naxsi
  ##
  include /etc/nginx/naxsi-enabled/*.rules;

  ##
  # include other confs
  ##
  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/upstreams.d/*.conf;
  include /etc/nginx/sites-enabled/*;

}
